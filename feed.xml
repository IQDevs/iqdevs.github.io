<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<generator uri="http://jekyllrb.com" version="3.0.1">Jekyll</generator>
<link href="/feed.xml" rel="self" type="application/atom+xml" />
<link href="/" rel="alternate" type="text/html" />
<updated>2017-04-13T22:11:04-05:00</updated>
<id>/</id>
<subtitle>Some things just can&#39;t be contained in a box</subtitle>
<entry>
<title>Rust for High-Level Programming Language Developers</title>
<link href="/rust/2017/04/12/Rust-for-High-Level-Programming-Language-Developers.html" rel="alternate" type="text/html" title="Rust for High-Level Programming Language Developers" />
<published>2017-04-12T00:00:00-05:00</published>
<updated>2017-04-12T00:00:00-05:00</updated>
<id>/rust/2017/04/12/Rust for High-Level Programming Language Developers</id>
<content type="html" xml:base="/rust/2017/04/12/Rust-for-High-Level-Programming-Language-Developers.html">&lt;p&gt;So you’ve been doing high-level programming all your life, and you’ve been eyeing Rust for some time now, and you’re not sure where to start (or how to start). Well, this walk-through-like post will guide you through some of the common tasks you preform in high-level languages like JavaScript, Python, or even C#. I’ll try to stay away from C++ for reasons I won’t get to discuss here. Just know that this is a C++-free post.&lt;/p&gt;

&lt;h3 id=&quot;so-json-in-rust&quot;&gt;So, JSON in Rust?&lt;/h3&gt;
&lt;p&gt;#### The short answer is ‘no built-in support for JSON but…’
Well, Rust has no built-in support for JSON objects, but before you let that throw you off, Rust &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt;s are ~ 99% identical to JSON objects in their outer structure and the way they are defined and used. Let’s look at an example.&lt;/p&gt;

&lt;p&gt;Say you want to define a Person JSON object with fields holding things like the &lt;code class=&quot;highlighter-rouge&quot;&gt;full name&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;date of birth&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;gender&lt;/code&gt; of a person. Here’s how you’d likely define your object in a language like JavaScript:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js
var person = {
  fullName: &#39;Fadi Hanna Al-Kass&#39;,
  dateOfBirth: &#39;01-01-1990&#39;,
  gender: &#39;MALE&#39;
};
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here’s how you’d write this in Rust:&lt;/p&gt;

&lt;p&gt;```rust
// Our pseudo-JSON object skeleton
struct Person {
  full_name: String,
  date_of_birth: String,
  gender: String
}&lt;/p&gt;

&lt;p&gt;fn main () {
  let person = Person {
    full_name: “Fadi Hanna Al-Kass”.to_string(),
    date_of_birth: “01-01-1990”.to_string(),
    gender: “MALE”.to_string()
  };
}
```&lt;/p&gt;

&lt;p&gt;You’ve probably already noticed two differences between the two code snippets:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We had to define a skeleton for our pseudo-JSON object&lt;/li&gt;
  &lt;li&gt;We used lowerCamelCase with JavaScript and snake_case with our Rust code snippet. This is really nothing more than a naming convention that the Rust compiler will throw a bunch of warnings at you if you don’t follow, but it shouldn’t have an effect on the execution of your program if you so choose not to follow.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now back to the first (and perhaps, more obvious) difference. Rust is a very (and I mean very) strongly typed programming language. That said, it needs to own as much information about your object types during the compilation process as possible. Of course, &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt;s are no exception, and you can really consider two ways (or more, depending on how imaginational you are) of looking at this: it is either (1) &lt;code class=&quot;highlighter-rouge&quot;&gt;limiting&lt;/code&gt; or (2) &lt;code class=&quot;highlighter-rouge&quot;&gt;validating&lt;/code&gt;. I wouldn’t be putting this post together had I considered strong-typing limiting.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can always replace a strongly typed pseudo-JSON object with a &lt;code class=&quot;highlighter-rouge&quot;&gt;HashMap&lt;/code&gt; to get around the static typing issue, but I’d advice against that, and I believe I can convince you to stick to the &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; approach. You may, at this point, still don’t think so, but wait until we get to these magical little thingies called &lt;code class=&quot;highlighter-rouge&quot;&gt;traits&lt;/code&gt; and then we’ll see ;-)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;nested-pseudo-json-objects&quot;&gt;Nested pseudo-JSON Objects?&lt;/h3&gt;
&lt;p&gt;#### Sure, forward we go&lt;/p&gt;

&lt;p&gt;Let’s design our &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt; JSON object in a more modern fashion. Instead of having a field containing the &lt;code class=&quot;highlighter-rouge&quot;&gt;full_name&lt;/code&gt;, we can turn &lt;code class=&quot;highlighter-rouge&quot;&gt;full_name&lt;/code&gt; into a sub-&lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; that has two fields (&lt;code class=&quot;highlighter-rouge&quot;&gt;first_name&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;last_name&lt;/code&gt;). Instead of storing &lt;code class=&quot;highlighter-rouge&quot;&gt;date_of_birth&lt;/code&gt; as a string that we may, at some point, need to parse down to extract the day, month, and the year from, we can store this information in a &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; with three separate fields. And for our &lt;code class=&quot;highlighter-rouge&quot;&gt;gender&lt;/code&gt; field, we can reference an &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;```rust
struct FullName {
    first_name: String,
    last_name: String
}&lt;/p&gt;

&lt;p&gt;struct DateOfBirth {
    day: i8,  // 8-bit integer variable
    month: i8,
    year: i16 // 16-bit integer variable
}&lt;/p&gt;

&lt;p&gt;enum Gender {
    MALE,
    FEMALE,
    NotDisclosed
}&lt;/p&gt;

&lt;p&gt;struct Person {
  full_name: FullName,
  date_of_birth: DateOfBirth,
  gender: Gender
}&lt;/p&gt;

&lt;p&gt;fn main () {
  let person = Person {
      full_name: FullName {
          first_name: “Fadi”.to_string(),
          last_name: “Hanna Al-Kass”.to_string()
      },
      date_of_birth: DateOfBirth {
          day: 1,
          month: 1,
          year: 1990
      },
      gender: Gender::MALE
  };
}
```&lt;/p&gt;

&lt;p&gt;Our pseudo-JSON object is now looking much cleaner and even easier to utilize. Speaking of utilization, how do we reference our fields? Well, you’ve probably guessed it already. Yes, it’s the dot operator. If you’re interested in, say, printing the full name of your person object. Here’s how you’d do that:&lt;/p&gt;

&lt;p&gt;```rust
// The following line of code goes inside your main function right after
// your person object has been instantiated, or really anywhere after the
// object has been declared.&lt;/p&gt;

&lt;p&gt;println!(“{} {}”, person.full_name.first_name, person.full_name.last_name);
```&lt;/p&gt;

&lt;p&gt;and you’re probably seeing a problem here already. It would absolutely be tedious to use this approach to print out the full name of a person especially if you were to do this from multiple places in your program let alone the fact the way the print is done looks really primitive. There must be a different (perhaps, even, better) way you say. You bet there is. In fact, there not only is but are many ways you can go about handling this issue, which one of which would be the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;traits&lt;/code&gt;. A trait is a programmatical way of telling the compiler how to carry out specific functionalities during the build process. We’re going to use one here to learn how to write our own further below. The trait we’re about to use in a moment is called the &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt; trait which basically sets out a specific printing layout for your defined &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; or what have you.&lt;/p&gt;

&lt;p&gt;If you simply add &lt;code class=&quot;highlighter-rouge&quot;&gt;#[derive(Debug)]&lt;/code&gt; right on top of your &lt;code class=&quot;highlighter-rouge&quot;&gt;FullName&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; definition: i.e.:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust
#[derive(Debug)]
struct FullName {
    first_name: String,
    last_name: String
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and replace:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust
println!(&quot;{} {}&quot;, person.full_name.first_name, person.full_name.last_name);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;with:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust
println!(&quot;{:?}&quot;, person.full_name);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You’ll end up with:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust
FullName { first_name: &quot;Fadi&quot;, last_name: &quot;Hanna Al-Kass&quot; }
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Cool, isn’t it? Well, it gets even cooler in a bit.&lt;/p&gt;

&lt;p&gt;But hang on a second, why did I have to replace &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;{}&quot;&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;{:?}&quot;&lt;/code&gt; in my &lt;code class=&quot;highlighter-rouge&quot;&gt;println&lt;/code&gt; statement? Or an even more proper question to ask is: what is the difference between the two?
Well, so Rust has two ways of printing out stuff (or maybe more than two that I still haven’t discovered yet!): a (1) &lt;code class=&quot;highlighter-rouge&quot;&gt;Display&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Display&lt;/code&gt; is what you’d probably want to use to allow the program to communicate some meaningful output to your user, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt; is what you could use during the development process. Each one of these two is a separate &lt;code class=&quot;highlighter-rouge&quot;&gt;trait&lt;/code&gt; that can co-exist without overlapping each other. By that I mean, you can allow your object to print something with &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;{}&quot;&lt;/code&gt; and something entirely different with &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;{:?}&quot;&lt;/code&gt;, but that’s to be covered when we get down to writing our own &lt;code class=&quot;highlighter-rouge&quot;&gt;trait&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;So is it possible to use &lt;code class=&quot;highlighter-rouge&quot;&gt;#[derive(Debug)]&lt;/code&gt; to print out nested objects? Yes, it is, and following is how. Simply add &lt;code class=&quot;highlighter-rouge&quot;&gt;#[derive(Debug)]&lt;/code&gt; right on top of your main object and every object that’s part of it and then print the object as a whole by passing it to a  &lt;code class=&quot;highlighter-rouge&quot;&gt;println&lt;/code&gt; function using the &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;{:?}&quot;&lt;/code&gt; notation, i.e.:&lt;/p&gt;

&lt;p&gt;```rust
#[derive(Debug)]
struct FullName {
    first_name: String,
    last_name: String
}&lt;/p&gt;

&lt;h1 id=&quot;derivedebug&quot;&gt;[derive(Debug)]&lt;/h1&gt;
&lt;p&gt;struct DateOfBirth {
    day: i8,  // 8-bit integer variable
    month: i8,
    year: i16 // 16-bit integer variable
}&lt;/p&gt;

&lt;h1 id=&quot;derivedebug-1&quot;&gt;[derive(Debug)]&lt;/h1&gt;
&lt;p&gt;enum Gender {
    MALE,
    FEMALE,
    NotDisclosed
}&lt;/p&gt;

&lt;h1 id=&quot;derivedebug-2&quot;&gt;[derive(Debug)]&lt;/h1&gt;
&lt;p&gt;struct Person {
  full_name: FullName,
  date_of_birth: DateOfBirth,
  gender: Gender
}&lt;/p&gt;

&lt;p&gt;fn main () {
  let person = Person {
      full_name: FullName {
          first_name: “Fadi”.to_string(),
          last_name: “Hanna Al-Kass”.to_string()
      },
      date_of_birth: DateOfBirth {
          day: 1,
          month: 1,
          year: 1990
      },
      gender: Gender::MALE
  };
  println!(“”, person);
}
```&lt;/p&gt;

&lt;p&gt;And your output will look like:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust
Person { full_name: FullName { first_name: &quot;Fadi&quot;, last_name: &quot;Hanna Al-Kass&quot; }, date_of_birth: DateOfBirth { day: 1, month: 1, year: 1990 }, gender: MALE }
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Our output is looking pretty verbose already, and you may not like that. Is there a way to manipulate this output in terms of re-arranging its layout or limiting the amount of information being displayed? You bet there is, and it’s through writing our own &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;trait&lt;/code&gt; instead of using a &lt;code class=&quot;highlighter-rouge&quot;&gt;derive&lt;/code&gt;d one. I think it’s better to introduce one more thing right before we get down to business with &lt;code class=&quot;highlighter-rouge&quot;&gt;trait&lt;/code&gt;s, and that is Rust’s &lt;code class=&quot;highlighter-rouge&quot;&gt;OOP&lt;/code&gt;-like paradigm. I call it &lt;code class=&quot;highlighter-rouge&quot;&gt;OOP&lt;/code&gt;-like because Rust doesn’t consider itself an Object-Oriented Programming Language, but sure that in no way means we can’t do &lt;code class=&quot;highlighter-rouge&quot;&gt;OOP&lt;/code&gt; in Rust. It just means &lt;code class=&quot;highlighter-rouge&quot;&gt;OOP&lt;/code&gt; is done differently. To be more precise, &lt;code class=&quot;highlighter-rouge&quot;&gt;OOP&lt;/code&gt; in Rust is done in a way Rust wouldn’t consider &lt;code class=&quot;highlighter-rouge&quot;&gt;OOP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Up until now, we’ve only been working with &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt;s and &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;s. You’ve probably already noticed that we used them to store data, but no logic (constructors, function, destructors, etc) was added to them. That’s because that’s not where the functions go. before I further explain this, let’s look at a tiny Python class and discuss how its alternative can be written in Rust.
Say you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; with a constructor that takes a &lt;code class=&quot;highlighter-rouge&quot;&gt;first_name&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;last_name&lt;/code&gt; and provides two separate getter functions that give you these two string values whenever you need them. You’d write your class something as follows:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
class Person:
  def __init__(self, firstName, lastName):
    self.firstName = firstName
    self.lastName = lastName
  def getFirstName(self):
    return self.firstName
  def getLastName(self):
    return self.lastName
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Notice how we have our fields and functions mixed together inside a single class. Rust separates the two. You’d have your fields defined inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; and an &lt;code class=&quot;highlighter-rouge&quot;&gt;impl&lt;/code&gt; containing all relevant functions. So, when interpreted, our Python class would look in Rust as follows:&lt;/p&gt;

&lt;p&gt;```rust
struct Person {
    first_name: String,
    last_name: String
}&lt;/p&gt;

&lt;p&gt;impl Person {
    fn new (first_name: String, last_name: String) -&amp;gt; Person {
        return Person {
            first_name: first_name,
            last_name: last_name
        };
    }
    fn get_first_name (&amp;amp;self) -&amp;gt; &amp;amp;str {
        return &amp;amp;self.first_name;
    }&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fn get_last_name (&amp;amp;self) -&amp;gt; &amp;amp;str {
    return &amp;amp;self.last_name
} }  ```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And to instantiate the object and access/utilize its functions, we do the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust
let person = Person::new(&quot;Fadi&quot;.to_string(), &quot;Hanna Al-Kass&quot;.to_string());
println!(&quot;{}, {}&quot;, person.get_last_name(), person.get_first_name());
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You’ve probably already looked at the code and thought to yourself “aha, &lt;code class=&quot;highlighter-rouge&quot;&gt;Person::new()&lt;/code&gt; must be the constructor” to which you’d definitely be right. however, one thing you need to keep in mind is that Rust has no concept of a &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt; per se. Instead, we define a static function that we use to instantiate our object. This also means &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; is not a keyword nor is it the required name of your entry point to your object; it can really be anything but &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; is the convention.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In short, your class constructor is a static function located inside an &lt;code class=&quot;highlighter-rouge&quot;&gt;impl&lt;/code&gt; and turns an object of the type of the class you’re instantiating (Person in our case).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;traits&quot;&gt;Traits&lt;/h3&gt;
&lt;p&gt;#### If this doesn’t turn you into a Rust fanatic, I don’t think anything will. &lt;em&gt;Sad :-(&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;trait&lt;/code&gt; is nothing but a language feature that tells the compiler about a type-specific functionality. The definition of a &lt;code class=&quot;highlighter-rouge&quot;&gt;trait&lt;/code&gt; may be confusing as heck to you, but it’ll all settle for you with the first example or two.&lt;/p&gt;

&lt;p&gt;Remember how we were talking about classes with constructors, functions, and destructors? Well, we’ve already discussed how constructors and functions are done in Rust. Let’s talk a little about destructors. A &lt;code class=&quot;highlighter-rouge&quot;&gt;destructor&lt;/code&gt; is normally a class function that invokes itself once the class is out of scope. In some low-level programming languages like C++, a class destructor is normally used to deallocate all allocated memory and preform some house cleaning. Rust has an &lt;code class=&quot;highlighter-rouge&quot;&gt;impl&lt;/code&gt; destruction functionality (&lt;code class=&quot;highlighter-rouge&quot;&gt;trait&lt;/code&gt;) called &lt;code class=&quot;highlighter-rouge&quot;&gt;Drop&lt;/code&gt;. Let’s look at how this trait can be implemented and invoked:&lt;/p&gt;

&lt;p&gt;Let’s say you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;Response&lt;/code&gt; object you return to a HTTP validation layer that sends it to an end-client. Once this operation is complete, you have no business in maintaining this &lt;code class=&quot;highlighter-rouge&quot;&gt;Response&lt;/code&gt; object, so it’ll delete itself once it’s out of scope. Let’s start by defining this structure:&lt;/p&gt;

&lt;p&gt;```rust
struct Response {
  code: i32,
  message: String
}&lt;/p&gt;

&lt;p&gt;fn main () {
  let res = Response{
    code: 200,
    message: “OK”.to_string()
  };
}
```&lt;/p&gt;

&lt;p&gt;Now let’s add a &lt;code class=&quot;highlighter-rouge&quot;&gt;Drop&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;trait&lt;/code&gt; to our object and see when &lt;code class=&quot;highlighter-rouge&quot;&gt;Drop&lt;/code&gt; is invoked:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust
impl Drop for Response {
  fn drop(&amp;amp;mut self) {
    println!(&quot;I ran out of scope. I&#39;m about to be destroyed&quot;)
  }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you try to run the complete program now, i.e.:&lt;/p&gt;

&lt;p&gt;```rust
struct Response {
  code: i32,
  message: String
}&lt;/p&gt;

&lt;p&gt;impl Drop for Response {
  fn drop(&amp;amp;mut self) {
    println!(“I ran out of scope. I’m about to be destroyed”)
  }
}&lt;/p&gt;

&lt;p&gt;fn main () {
  let res = Response{
    code: 200,
    message: “OK”.to_string()
  };
}
```&lt;/p&gt;

&lt;p&gt;You’ll see the following output right before the program finishes executing:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
I ran out of scope. I&#39;m about to be destroyed
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let’s look at another example.
If you’ve ever done any scientific computation in Python, chances are you’ve overloaded some of the arithmetic operations (&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt;, etc). A vector class with &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; overloaded would look something like the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
class Vector:
  def __init__(self, a, b):
    self.a = a
    self.b = b
  def __add__(self, otherVector):
    return Vector(self.a + otherVector.a, self.b + otherVector.b)
  def __str__(self):
    return &quot;Vector(%s, %s)&quot; % (self.a, self.b)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And if you were to add two &lt;code class=&quot;highlighter-rouge&quot;&gt;Vector&lt;/code&gt; objects, you’d so something like the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
v1 = Vector(1, 2)
v2 = Vector(5, 7)
v3 = v1 + v2
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And print the result as follows:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
print(v3)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will print the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
Vector(6, 9)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Hmm.. Let’s see how we could go about implementing this in Rust. First, we’d need to somehow find a way to add objects (i.e., overload the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; operator). Second, we’d need to be able to give our object to &lt;code class=&quot;highlighter-rouge&quot;&gt;println&lt;/code&gt; and see it print something like &lt;code class=&quot;highlighter-rouge&quot;&gt;Vector(#, #)&lt;/code&gt;. Lucky for us, both of these features are available as &lt;code class=&quot;highlighter-rouge&quot;&gt;trait&lt;/code&gt;s we can implement. Let’s chase them one at a time. We’ll start with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Add&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;trait&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s our Rust &lt;code class=&quot;highlighter-rouge&quot;&gt;Vector&lt;/code&gt; object:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust
struct Vector {
  a: i32,
  b: i32
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We, then, add the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; operation overloaded to our &lt;code class=&quot;highlighter-rouge&quot;&gt;Vector&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; as follows:&lt;/p&gt;

&lt;p&gt;```rust
use std::ops::Add;&lt;/p&gt;

&lt;p&gt;impl Add for Vector {
  type Output = Vector;
  fn add(self, other_vector: Vector) -&amp;gt; Vector {
    return Vector {
      a: self.a + other_vector.a,
      b: self.b + other_vector.b
    };
  }
}
```&lt;/p&gt;

&lt;p&gt;At this point, we can have the following in our &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; function:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust
let v1 = Vector {
  a: 1,
  b: 2
};
let v2 = Vector {
  a: 5,
  b: 7
};
let v3 = v1 + v2;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But we can’t print quite yet. Let’s implement this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust
use std::fmt::{Debug, Formatter, Result};
impl Debug for Vector {
  fn fmt(&amp;amp;self, f: &amp;amp;mut Formatter) -&amp;gt; Result {
    write!(f, &quot;Vector({}, {})&quot;, self.a, self.b)
  }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we can print &lt;code class=&quot;highlighter-rouge&quot;&gt;v3&lt;/code&gt; as follows:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust
println!(&quot;{:?}&quot;, v3);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And get the following output:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust
Vector(6, 9)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Your final program should look like the following:&lt;/p&gt;

&lt;p&gt;```rust
struct Vector {
  a: i32,
  b: i32
}&lt;/p&gt;

&lt;p&gt;use std::ops::Add;&lt;/p&gt;

&lt;p&gt;impl Add for Vector {
  type Output = Vector;
  fn add(self, other_vector: Vector) -&amp;gt; Vector {
    return Vector {
      a: self.a + other_vector.a,
      b: self.b + other_vector.b
    };
  }
}&lt;/p&gt;

&lt;p&gt;use std::fmt::{Debug, Formatter, Result};
impl Debug for Vector {
  fn fmt(&amp;amp;self, f: &amp;amp;mut Formatter) -&amp;gt; Result {
    write!(f, “Vector({}, {})”, self.a, self.b)
  }
}&lt;/p&gt;

&lt;p&gt;fn main () {
  let v1 = Vector{a: 1, b: 2};
  let v2 = Vector{a: 5, b: 7};
  let v3 = v1 + v2;
  println!(“”, v3);
}
```&lt;/p&gt;

&lt;p&gt;Oh, and you know how I said &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;{}&quot;&lt;/code&gt; is used to communicate output to the user while &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;{:?}&quot;&lt;/code&gt; is usually used for debugging purposes? Well, it turns out you can overload the &lt;code class=&quot;highlighter-rouge&quot;&gt;Display&lt;/code&gt; trail (available under &lt;code class=&quot;highlighter-rouge&quot;&gt;std::fmt&lt;/code&gt; as well) to print your object using &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;{:?}&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, simply replace:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust
use std::fmt::{Debug, Formatter, Result};
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust
use std::fmt::{Display, Formatter, Result};
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust
impl Debug for Vector {
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust
impl Display for Vector {
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust
println!(&quot;{:?}&quot;, v3);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust
println!(&quot;{}&quot;, v3);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And voila, you’re all set.&lt;/p&gt;

&lt;h3 id=&quot;statements-vs-expressions&quot;&gt;Statements vs. Expressions?&lt;/h3&gt;
&lt;p&gt;At this point, I’m a bit tired of having to included unnecessary keywords in my code snippets, so I thought I’d introduce the concept of statement-vs-expression in Rust.&lt;/p&gt;

&lt;p&gt;So, basically statements that don’t end with a semi-colon (&lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;) return something and they even have a special label: &lt;code class=&quot;highlighter-rouge&quot;&gt;expressions&lt;/code&gt;. Without getting into too much detail and get you all confused, let me instead throw a little snippet at you and let you sort it out in your head.&lt;/p&gt;

&lt;p&gt;So, let’s say you have a function that takes two &lt;code class=&quot;highlighter-rouge&quot;&gt;i32&lt;/code&gt; arguments and returns the their sum. You could have your function like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust
fn sum(a: i32, b: i32) -&amp;gt; i32 {
  return a + b;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;of you could have the shorthand notation of the function by using an expression instead of a statement:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rust
fn sub(a: i32, b: i32) -&amp;gt; {
  a + b
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So from this point on, I will be using expressions whenever possible.&lt;/p&gt;
</content>
<author>
<name>alkass</name>
</author>
<summary>So you’ve been doing high-level programming all your life, and you’ve been eyeing Rust for some time now, and you’re not sure where to start (or how to start). Well, this walk-through-like post will guide you through some of the common tasks you preform in high-level languages like JavaScript, Python, or even C#. I’ll try to stay away from C++ for reasons I won’t get to discuss here. Just know that this is a C++-free post.</summary>
</entry>
</feed>
